#!/usr/bin/env python

from multiprocessing import Pool
import os
import random
import socket
import struct
from optparse import OptionParser

def main():
		"""
    Handle the command line arguments to populate urls
    """
		parser = OptionParser(usage="""
populate-urls [options]

Options:
  -c, --count		COUNT, number of different IPs to generate
  -l, --limit		LIMIT, upper limit for hash (0 ... LIMIT)
    """)
		parser = OptionParser()
		parser.add_option("-c", "--count", dest="count", default=100,
											help="number of different IPs to generate", metavar="COUNT")
		parser.add_option("-l", "--limit", dest="limit", default=100,
											help="upper limit for hash (0 ... LIMIT)", metavar="LIMIT")

		(options, args) = parser.parse_args()
		
		populate(options.count, options.limit)
		
def populate(count, limit):
		pwd = os.path.dirname(__file__)
		url_file = '%s/beeswithmachineguns/urls' % (pwd)
		operating_systems = ['ios', 'android', 'macox', 'windows', 'others']
		with open(url_file, "w") as myfile:
				for x in range(0, count):
						ip = socket.inet_ntoa(struct.pack('>I', random.randint(1, 0xffffffff)))
						o_s = random.choice (operating_systems)
						hash = random.choice (range(0, limit))
						if x % 11 == 0:
								url = "/positions1/%s?os=%s" % (hash, o_s)
						elif x % 9 == 0:
								url = "/positions1/%s?ip=%s" % (hash,ip)
						elif x % 7 == 0:
								url = "/positions1/%s" % (hash)
						else:
								url = "/positions1/%s?os=%s&ip=%s" % (hash, o_s, ip)
						myfile.write(url)
						if x < count -1:
								myfile.write('\n')

if __name__ == '__main__':
    main()
